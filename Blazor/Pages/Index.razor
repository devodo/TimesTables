@page "/"
@inject IJSRuntime JSRuntime

<h1>Maya's Times Tables</h1>

<div class="question">
    @if (_equation.IsMultipleFirst)
    {
        RenderProductInput(_equation);<span> = </span>RenderFactorsInput(_equation);
    }
    else
    {
        RenderFactorsInput(_equation);<span> = </span>RenderProductInput(_equation);
    }
</div>

<div>
    <ul class="answers">
        @foreach (var equation in GetAnswers())
        {
            <li class="@equation.ResultClass">
                @if (equation.IsMultipleFirst)
                {
                    RenderMultiple(equation);<span> = </span>RenderFactors(equation);
                }
                else
                {
                    RenderFactors(equation);<span> = </span>RenderMultiple(equation);
                }

                @if (!equation.IsCorrect)
                {
                    <span>@equation.OriginalResult</span>
                }
            </li>
        }
    </ul>
</div>

@{
    void RenderProductInput(Equation equation)
    {
        if (_equation.Multiple == null)
        {
            RenderInput();
        }
        else
        {
            <span>@_equation.Multiple</span>
        }
    }

    void RenderFactorsInput(Equation equation)
    {
        if (_equation.Factor1 == null)
        {
            RenderInput();
        }
        else
        {
        <span>@_equation.Factor1</span>
        }
    
        <span> x </span>
    
        if (_equation.Factor2 == null)
        {
            RenderInput();
        }
        else
        {
            <span>@_equation.Factor2</span>
        }
    }
    
    void RenderInput() 
    {
        <input placeholder="?" @bind-value="_result" @bind-value:event="oninput" @onkeyup="@KeyUp"  id="numberInput" />
    }
    
    void RenderFactors(Equation equation) 
    {
        RenderFactor1(equation);<span> x </span>RenderFactor2(equation);
    }

    void RenderFactor1(Equation equation)
    {
        if (equation.Factor1 != null)
        {
            <span>@equation.Factor1</span>
        }
        else
        {
            <span class="answer">@equation.Result</span>
        }
    }

    void RenderFactor2(Equation equation)
    {
        if (equation.Factor2 != null)
        {
            <span>@equation.Factor2</span>
        }
        else
        {
            <span class="answer">@equation.Result</span>
        }
    }
    
    void RenderMultiple(Equation equation)
    {
        if (equation.Multiple != null)
        {
            <span>@equation.Multiple</span>
        }
        else
        {
            <span class="answer">@equation.Result</span>
        }
    }
}

@code {
    const string InputId = "numberInput";
    private readonly Random _random = new Random();
    
    private readonly List<Equation> _answers = new List<Equation>();

    private Equation _equation;
    private string _result;

    protected override Task OnInitializedAsync()
    {
        _equation = CreateEquation();

        return Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Focus the element
            await JSRuntime.FocusAsync(InputId);
        }
    }

    private Equation CreateEquation()
    {
        var inputs = Enumerable.Range(0, 2).Select(x => (int?)_random.Next(1, 12)).ToList();
        inputs.Add(inputs[0] * inputs[1]);
        var resultIndex = _random.Next(0, 2);
        var originalResult = inputs[resultIndex].Value;
        inputs[resultIndex] = null;

        return new Equation
        {
            Factor1 = inputs[0],
            Factor2 = inputs[1],
            Multiple = inputs[2],
            OriginalResult = originalResult,
            IsMultipleFirst = _random.Next() > (Int32.MaxValue / 2)
        };
    }
    
    private async Task OnSubmit()
    {
        if (string.IsNullOrWhiteSpace(_result) || !int.TryParse(_result, out var parsedResult))
        {
            return;
        }

        _equation.Result = parsedResult;
        _answers.Add(_equation);

        _equation = CreateEquation();
        _result = null;

        await JSRuntime.FocusAsync(InputId);
    }

    private async Task KeyUp(KeyboardEventArgs  eventArgs)
    {
        if (eventArgs.Key == "Enter" )
        {
            await OnSubmit();
        }        
    }

    private IEnumerable<Equation> GetAnswers()
    {
        for (var i = _answers.Count - 1; i >= 0; i--)
        {
            yield return _answers[i];
        }
    }

    public class Equation
    {
        public int? Factor1 { get; set; }
        
        public int? Factor2 { get; set; }

        public int? Multiple { get; set; }

        public int Result { get; set; }

        public int OriginalResult { get; set; }

        public bool IsMultipleFirst { get; set; }

        public bool IsCorrect => Result == OriginalResult;

        public string ResultClass => IsCorrect ? "correct" : "invalid";
    }
}